info:
  title: Burger API -Tech Challenge API
  version: v1
openapi: 3.0.1
paths:
  /api/customers:
    get:
      operationId: getAllCustomers
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomerDTO'
                type: array
          description: OK
      summary: List all customers
      security:
        - LambdaAuthorizer: []
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/customers
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
    post:
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Create a new customers
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: <LOAD_BALANCER_URI>/customers
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/customers/{cpf}:
    get:
      operationId: getCustomerByCpf
      parameters:
      - in: path
        name: cpf
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Search for a customer by CPF
      security:
        - LambdaAuthorizer: []
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/customers/{cpf}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
    put:
      operationId: updateCustomerByCpf
      parameters:
      - in: path
        name: cpf
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCustomerDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Update customers data
      security:
        - LambdaAuthorizer: []
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: PUT
        uri: <LOAD_BALANCER_URI>/customers/{cpf}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/healthcheck:
    get:
      operationId: test
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckDTO"
          description: OK
      summary: Returns current API status
      tags:
      - Healthcheck API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/healthcheck
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match

  /api/notifications/mercadopago:
    post:
      operationId: instantPaymentNotification
      parameters:
      - in: query
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
      - Webhook Mercado Pago Controller
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: <LOAD_BALANCER_URI>/notifications/mercadopago
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.querystring.topic: method.request.querystring.topic
          integration.request.querystring.id: method.request.querystring.id
  /api/notifications/mercadopago/fake:
    post:
      operationId: fakePaymentNotification
      parameters:
      - in: query
        name: approve
        schema:
          type: boolean
      - in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentWebhookDTO'
          description: OK
      summary: Simulate the webhook integration, when 'approve' is true, simulates
        the success of the payment
      security:
        - LambdaAuthorizer: []
      tags:
      - Webhook Mercado Pago Controller
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: <LOAD_BALANCER_URI>/notifications/mercadopago/fake
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.querystring.approve: method.request.querystring.approve
          integration.request.querystring.id: method.request.querystring.id
  /api/orders:
    get:
      operationId: getOrders
      parameters:
      - in: query
        name: status
        required: false
        schema:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
      - in: query
        name: orderBy
        required: false
        schema:
          enum:
          - CREATED_AT
          - ORDER_NUMBER
          - AMOUNT
          type: string
      - in: query
        name: orderDirection
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderDTO'
                type: array
          description: OK
      summary: List all orders based on query filters
      security:
        - LambdaAuthorizer: []
      tags:
      - Order API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/orders
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.querystring.status: method.request.querystring.status
          integration.request.querystring.orderBy: method.request.querystring.orderBy
          integration.request.querystring.orderDirection: method.request.querystring.orderDirection
    post:
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
          description: OK
      summary: Create a new Order
      tags:
      - Order API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: <LOAD_BALANCER_URI>/orders
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/orders/{id}:
    get:
      operationId: getOrder
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
          description: OK
      summary: Get all details of an order
      security:
        - LambdaAuthorizer: []
      tags:
      - Order API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/orders/{id}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
    patch:
      operationId: updateStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      summary: Update the oder's status
      security:
        - LambdaAuthorizer: []
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        type: http_proxy
        uri: <LOAD_BALANCER_URI>/orders/{id}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.id: method.request.path.id
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/orders/{id}/checkout:
    post:
      operationId: payOrder
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDTO'
          description: OK
      summary: Pay the order with mercado pago
      security:
        - LambdaAuthorizer: []
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: <LOAD_BALANCER_URI>/orders/{id}/checkout
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.id: method.request.path.id
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/orders/{id}/history:
    get:
      operationId: getOrderHistory
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderHistoryDTO'
                type: array
          description: OK
      summary: Get the order's history with all status changes
      security:
        - LambdaAuthorizer: []
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: <LOAD_BALANCER_URI>/orders/{id}/history
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.id: method.request.path.id
  /api/payments/{payment_id}:
    get:
      operationId: getPayment
      parameters:
      - in: query
        name: isExternal
        required: false
        schema:
          type: boolean
      - in: path
        name: payment_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: OK
      summary: Get a payment details by its ID. When 'isExternal' is true, search
        by the external gateway ID
      security:
        - LambdaAuthorizer: []
      tags:
      - Payment Controller
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: <LOAD_BALANCER_URI>/payments/{payment_id}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.payment_id: method.request.path.payment_id
  /api/products:
    get:
      operationId: getProducts
      parameters:
      - in: query
        name: category
        required: false
        schema:
          enum:
          - SANDWICH
          - SIDE_DISH
          - DRINK
          - DESSERT
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: OK
      summary: List all storage products
      tags:
      - Product API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: <LOAD_BALANCER_URI>/products
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
          description: OK
      summary: Creates a new product
      security:
        - LambdaAuthorizer: []
      tags:
      - Product API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: <LOAD_BALANCER_URI>/products
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/products/{id}:
    delete:
      operationId: deleteProduct
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      summary: Delete a product from database
      security:
        - LambdaAuthorizer: []
      tags:
      - Product API
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        type: http_proxy
        uri: <LOAD_BALANCER_URI>/products/{id}
        connectionType: VPC_LINK
        connectionId: <VPC_LINK_ID>
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.path.id: method.request.path.id

servers:
- description: Generated server url
  url: <LOAD_BALANCER_URI>

components:

  securitySchemes:
    LambdaAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "REQUEST"
        identitySource: "method.request.header.Authorization"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/<LAMBDA_AUTH_ARN>/invocations"
        authorizerCredentials: "arn:aws:iam::793862496606:role/LabRole"
        authorizerResultTtlInSeconds: 300

  schemas:
    HealthCheckDTO:
      properties:
        status:
          type: string
        message:
          type: string
    CreateCustomerDTO:
      properties:
        cpf:
          type: string
        email:
          type: string
        name:
          type: string
      required:
      - cpf
      - email
      - name
      type: object
    CreateOrderDTO:
      properties:
        customerId:
          maxLength: 36
          minLength: 36
          type: string
        products:
          items:
            $ref: '#/components/schemas/OrderProductDTO'
          type: array
      type: object
    CreateProductDTO:
      properties:
        category:
          enum:
          - SANDWICH
          - SIDE_DISH
          - DRINK
          - DESSERT
          type: string
        description:
          type: string
        imageUrl:
          type: string
        name:
          type: string
        price:
          exclusiveMinimum: true
          minimum: 0
          type: number
      required:
      - category
      - description
      - imageUrl
      - name
      type: object
    CustomerDTO:
      properties:
        cpf:
          type: string
        email:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    OrderDTO:
      properties:
        amount:
          type: number
        createdAt:
          format: date-time
          type: string
        customerId:
          format: uuid
          type: string
        history:
          items:
            $ref: '#/components/schemas/OrderHistory'
          type: array
        id:
          format: uuid
          type: string
        orderNumber:
          format: int32
          type: integer
        paidAt:
          format: date-time
          type: string
        products:
          items:
            $ref: '#/components/schemas/ProductAndQuantity'
          type: array
        status:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
        waitingTimeInSeconds:
          format: int64
          type: integer
      type: object
    OrderHistory:
      properties:
        lastStatus:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
        moment:
          format: date-time
          type: string
        previousStatus:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
      type: object
    OrderHistoryDTO:
      properties:
        lastStatus:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
        moment:
          format: date-time
          type: string
        previousStatus:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
      type: object
    OrderProductDTO:
      properties:
        id:
          maxLength: 36
          minLength: 36
          type: string
        quantity:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      required:
      - id
      - quantity
      type: object
    Payment:
      properties:
        amount:
          type: number
        externalId:
          type: string
        gateway:
          type: string
        id:
          format: uuid
          type: string
        orderId:
          format: uuid
          type: string
        payedAt:
          format: date-time
          type: string
        status:
          type: string
        transactionData:
          type: object
      type: object
    PaymentDTO:
      properties:
        amount:
          type: number
        externalId:
          type: string
        gateway:
          type: string
        orderId:
          format: uuid
          type: string
        payedAt:
          format: date-time
          type: string
        paymentId:
          format: uuid
          type: string
        status:
          type: string
        transactionData:
          type: object
      type: object
    PaymentWebhookDTO:
      properties:
        amount:
          type: number
        externalId:
          type: string
        gateway:
          type: string
        orderId:
          format: uuid
          type: string
        payedAt:
          format: date-time
          type: string
        paymentId:
          format: uuid
          type: string
        status:
          type: string
      type: object
    Product:
      properties:
        category:
          enum:
          - SANDWICH
          - SIDE_DISH
          - DRINK
          - DESSERT
          type: string
        description:
          type: string
        id:
          format: uuid
          type: string
        imageUrl:
          type: string
        name:
          type: string
        price:
          type: number
      type: object
    ProductAndQuantity:
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          format: int32
          type: integer
      type: object
    ProductDTO:
      properties:
        category:
          enum:
          - SANDWICH
          - SIDE_DISH
          - DRINK
          - DESSERT
          type: string
        description:
          type: string
        id:
          format: uuid
          type: string
        imageUrl:
          type: string
        name:
          type: string
        price:
          exclusiveMinimum: true
          minimum: 0
          type: number
      required:
      - category
      - description
      - imageUrl
      - name
      type: object
    PutCustomerDTO:
      properties:
        email:
          type: string
        name:
          type: string
      required:
      - email
      - name
      type: object
    UpdateOrderStatusDTO:
      properties:
        status:
          type: string
      required:
      - status
      type: object


