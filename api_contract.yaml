info:
  title: Burger API -Tech Challenge API
  version: v1
openapi: 3.0.1
paths:
  /api/customers:
    get:
      operationId: getAllCustomers
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomerDTO'
                type: array
          description: OK
      summary: List all customers
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: arn:aws:elasticloadbalancing:us-east-1:793862496606:listener/net/a4c00e69828834c8ba47303e3d01c1d0/9dbaf1f6187cf951/55924aac5f7ed4fd
        connectionType: VPC_LINK
        connectionId: jv5g60
        passthroughBehavior: when_no_match
    post:
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Create a new customers
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: arn:aws:elasticloadbalancing:us-east-1:793862496606:listener/net/a4c00e69828834c8ba47303e3d01c1d0/9dbaf1f6187cf951/55924aac5f7ed4fd
        connectionType: VPC_LINK
        connectionId: jv5g60
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/customers/{id}:
    get:
      operationId: getCustomerByCpf
      parameters:
      - in: path
        name: cpf
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Search for a customer by CPF
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: arn:aws:elasticloadbalancing:us-east-1:793862496606:listener/net/a4c00e69828834c8ba47303e3d01c1d0/9dbaf1f6187cf951/55924aac5f7ed4fd
        connectionType: VPC_LINK
        connectionId: jv5g60
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
    put:
      operationId: updateCustomerByCpf
      parameters:
      - in: path
        name: cpf
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCustomerDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
          description: OK
      summary: Update customers data
      tags:
      - Customer API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: arn:aws:elasticloadbalancing:us-east-1:793862496606:listener/net/a4c00e69828834c8ba47303e3d01c1d0/9dbaf1f6187cf951/55924aac5f7ed4fd
        connectionType: VPC_LINK
        connectionId: jv5g60
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
  /api/healthcheck:
    get:
      operationId: test
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Returns current API status
      tags:
      - Healthcheck API
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: arn:aws:elasticloadbalancing:us-east-1:793862496606:listener/net/a4c00e69828834c8ba47303e3d01c1d0/9dbaf1f6187cf951/55924aac5f7ed4fd
        connectionType: VPC_LINK
        connectionId: jv5g60
        passthroughBehavior: when_no_match

  /api/notifications/mercadopago:
    post:
      operationId: instantPaymentNotification
      parameters:
      - in: query
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
      - Webhook Mercado Pago Controller
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/notifications/mercadopago/fake:
    post:
      operationId: fakePaymentNotification
      parameters:
      - in: query
        name: approve
        schema:
          type: boolean
      - in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentWebhookDTO'
          description: OK
      summary: Simulate the webhook integration, when 'approve' is true, simulates
        the success of the payment
      tags:
      - Webhook Mercado Pago Controller
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/orders:
    get:
      operationId: getOrders
      parameters:
      - in: query
        name: status
        required: false
        schema:
          enum:
          - CREATED
          - RECEIVED
          - IN_PREPARATION
          - READY_TO_DELIVERY
          - CANCELED
          - FINISHED
          type: string
      - in: query
        name: orderBy
        required: false
        schema:
          enum:
          - CREATED_AT
          - ORDER_NUMBER
          - AMOUNT
          type: string
      - in: query
        name: orderDirection
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderDTO'
                type: array
          description: OK
      summary: List all orders based on query filters
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
    post:
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
          description: OK
      summary: Create a new Order
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/orders/{id}:
    get:
      operationId: getOrder
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
          description: OK
      summary: Get all details of an order
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
    patch:
      operationId: updateStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      summary: Update the oder's status
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/orders/{id}/checkout:
    post:
      operationId: payOrder
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDTO'
          description: OK
      summary: Pay the order with mercado pago
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/orders/{id}/history:
    get:
      operationId: getOrderHistory
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderHistoryDTO'
                type: array
          description: OK
      summary: Get the order's history with all status changes
      tags:
      - Order API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/payments/{payment_id}:
    get:
      operationId: getPayment
      parameters:
      - in: query
        name: isExternal
        required: false
        schema:
          type: boolean
      - in: path
        name: payment_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: OK
      summary: Get a payment details by its ID. When 'isExternal' is true, search
        by the external gateway ID
      tags:
      - Payment Controller
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/products:
    get:
      operationId: getProducts
      parameters:
      - in: query
        name: category
        required: false
        schema:
          enum:
          - SANDWICH
          - SIDE_DISH
          - DRINK
          - DESSERT
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: OK
      summary: List all storage products
      tags:
      - Product API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDTO'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
          description: OK
      summary: Creates a new product
      tags:
      - Product API
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080
  /api/products/{id}:
    delete:
      operationId: deleteProduct
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      summary: Delete a product from database
      tags:
      - Product API
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        type: http_proxy
        uri: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080

servers:
- description: Generated server url
  url: http://a0d25d889f11d460e8f2ab0127efe38f-968cf5a0599ab794.elb.us-east-1.amazonaws.com:8080

components:
  schemas:
    Product:
      $ref: '/api_schemas.yaml#/schemas/Product'
    ProductDTO:
      $ref: '/api_schemas.yaml#/schemas/ProductDTO'
    CreateProductDTO:
      $ref: '/api_schemas.yaml#/schemas/CreateProductDTO'
    CustomerDTO:
      $ref: './api_schemas.yaml#/schemas/CustomerDTO'
    CreateCustomerDTO:
      $ref: './api_schemas.yaml#/schemas/CreateCustomerDTO'
    PutCustomerDTO:
      $ref : './api_schemas.yaml#/schemas/PutCustomerDTO'
    OrderProductDTO:
      $ref: '/api_schemas.yaml#/schemas/OrderProductDTO'
    OrderDTO:
      $ref: './api_schemas.yaml#/schemas/OrderDTO'
    OrderHistoryDTO:
      $ref: '/api_schemas.yaml#/schemas/OrderHistoryDTO'
    CreateOrderDTO:
      $ref: './api_schemas.yaml#/schemas/CreateOrderDTO'
    UpdateOrderStatusDTO:
      $ref: '/api_schemas.yaml#/schemas/UpdateOrderStatusDTO'
    ProductAndQuantity:
      $ref: './api_schemas.yaml#/schemas/ProductAndQuantity'
    Payment:
      $ref: '/api_schemas.yaml#/schemas/Payment'
    PaymentDTO:
      $ref: '/api_schemas.yaml#/schemas/PaymentDTO'
    PaymentWebhookDTO:
      $ref: '/api_schemas.yaml#/schemas/PaymentWebhookDTO'

